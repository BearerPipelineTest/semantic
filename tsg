(identifier) @id
{
  node @id.node
}

(string) @this
{
  node @this.node
  attr (@this.node) type = "string"
  attr (@this.node) text = (source-text @this)
}

(true) @this
{
  node @this.node
  attr (@this.node) type = "true"
}

(false) @this
{
  node @this.node
  attr (@this.node) type = "false"
}

(print_statement argument: (_) @arg) @this
{
  node @this.node
  attr (@this.node) type = "print"
  edge @this.node -> @arg.node
}

(raise_statement (_) @arg) @this
{
  node @this.node
  attr (@this.node) type = "throw"
  edge @this.node -> @arg.node
}

(block (_)* @children) @this
{
  node @this.node
  attr (@this.node) type = "block"
  for child in @children {
    edge @this.node -> child.node
  }
}

; (else_clause body: (_) @body)
; {
;
; }

(if_statement condition: (_) @cond consequence: (_) @then alternative: (_) @else) @this
{
  node @this.node
  attr (@this.node) type = "if"
  edge @this.node -> @cond.node
  attr (@this.node -> @cond.node) type = "condition"
  edge @this.node -> @then.node
  attr (@this.node -> @then.node) type = "consequence"
  ; edge @this.node -> @else.node
}
